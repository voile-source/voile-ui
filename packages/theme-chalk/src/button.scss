@use 'mixins/mixins.scss' as *;
@use 'mixins/config.scss' as *;
@use 'common/var.scss' as *;
@use 'mixins/var' as *;
@use 'mixins/function.scss' as *;
@use './mixins/button' as *;

@include b(button) {
  @include set-component-css-var(button, $button);
}

@include b(button) {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  height: getCssVar('button', 'height');
  border-radius: getCssVar('border', 'radius-base');
  font-size: getCssVar('button', 'text-size');
  font-weight: getCssVar('button', 'font-weight');
  background-color: getCssVar('button', 'bg-color');
  border: 1px solid getCssVar('button', 'border-color');
  color: getCssVar('button', 'text-color');
  padding: getCssVar('button', 'padding');
  margin: getCssVar('button', 'margin');
  line-height: 1;
  user-select: none;
  cursor: pointer;
  transition: 0.1s;

  &:hover {
    background-color: getCssVar('button', 'hover', 'bg-color');
    border: 1px solid getCssVar('button', 'hover', 'border-color');
    color: getCssVar('button', 'hover', 'text-color');
  }

  &:active {
    background-color: getCssVar('button', 'active', 'bg-color');
    border: 1px solid getCssVar('button', 'active', 'border-color');
    color: getCssVar('button', 'active', 'text-color');
  }

  @include when(disabled) {
    &,
    &:hover,
    &:active {
      background-color: getCssVar('button', 'disabled', 'bg-color');
      border: 1px solid getCssVar('button', 'disabled', 'border-color');
      color: getCssVar('button', 'disabled', 'text-color');
      cursor: not-allowed;
    }
  }

  @include when(round) {
    border-radius: getCssVar('border', 'radius-round');
  }

  @include when(circle) {
    @include set-component-css-var(
      button,
      (
        'padding': 8px,
      )
    );
    border-radius: getCssVar('border', 'radius-circle');
  }

  @include when(link) {
    color: getCssVar('button', 'text-color');
    border: 0 solid transparent;
    background-color: transparent;

    @include when(disabled) {
      color: getCssVar('button', 'disabled', 'text-color');
      background-color: transparent !important;
      &:hover,
      &:active {
        border: 0;
      }
    }

    &:not(.is-disabled) {
      &:hover,
      &:focus {
        color: getCssVar('button', 'hover', 'link-text-color');
      }

      &:focus-visible {
        outline: 2px solid getCssVar('button', 'outline-color');
        outline-offset: 1px;
      }

      &:active {
        color: getCssVar('button', 'active', 'color');
      }
    }
  }

  @include when(text) {
    color: getCssVar('button', 'text-color');
    border: 0 solid transparent;
    background-color: transparent;

    @include when(disabled) {
      color: getCssVar('button', 'disabled', 'text-color');
      background-color: transparent !important;
      &:hover,
      &:active {
        border: 0;
      }
    }

    &:not(.is-disabled) {
      &:hover,
      &:focus {
        background-color: getCssVar('fill-color', 'light');
      }

      &:focus-visible {
        outline: 2px solid getCssVar('button', 'outline-color');
        outline-offset: 1px;
      }

      &:active {
        background-color: getCssVar('fill-color');
      }

      @include when(bg) {
        background-color: getCssVar('fill-color', 'light');

        &:hover,
        &:focus {
          background-color: getCssVar('fill-color');
        }

        &:active {
          background-color: getCssVar('fill-color', 'dark');
        }
      }
    }
  }

  @each $type in (primary, success, danger, warning, info) {
    @include m($type) {
      @include button-variant($type);
    }
  }

  @include m(small) {
    @include set-component-css-var(button, $button-small);
  }

  @include m(large) {
    @include set-component-css-var(button, $button-large);
  }
}
